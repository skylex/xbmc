{
  "JSONRPC.Introspect": {
    "type": "method",
    "description": "Enumerates all actions and descriptions",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "getdescriptions", "type": "boolean", "default": true },
      { "name": "getmetadata", "type": "boolean", "default": false },
      { "name": "filterbytransport", "type": "boolean", "default": true },
      { "name": "filter", "type": "object",
        "properties": {
          "id": { "type": "string", "required": true, "description": "Name of a namespace, method or type" },
          "type": { "type": "string", "required": true, "enum": [ "method", "namespace", "type", "notification" ], "description": "Type of the given name" },
          "getreferences": { "type": "boolean", "default": true, "description": "Whether or not to print the schema for referenced types" }
        }
      }
    ],
    "returns": "object"
  },
  "JSONRPC.Version": {
    "type": "method",
    "description": "Retrieve the jsonrpc protocol version",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": "string"
  },
  "JSONRPC.Permission": {
    "type": "method",
    "description": "Retrieve the clients permissions",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": {
      "type": "object",
      "properties": {
        "ReadData": { "type": "boolean", "required": true },
        "ControlPlayback": { "type": "boolean", "required": true },
        "ControlNotify": { "type": "boolean", "required": true },
        "ControlPower": { "type": "boolean", "required": true },
        "Logging": { "type": "boolean", "required": true },
        "ScanLibrary": { "type": "boolean", "required": true }
      }
    }
  },
  "JSONRPC.Ping": {
    "type": "method",
    "description": "Ping responder",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": "string"
  },
  "JSONRPC.GetNotificationFlags": {
    "type": "method",
    "description": "Get notification flags",
    "transport": "Announcing",
    "permission": "ReadData",
    "params": [],
    "returns": { "$ref": "Notification.Flags" }
  },
  "JSONRPC.SetNotificationFlags": {
    "type": "method",
    "description": "Change the notification flags",
    "transport": "Announcing",
    "permission": "ControlNotify",
    "params": [
      { "name": "Playback", "type": "boolean", "default": false },
      { "name": "GUI", "type": "boolean", "default": false },
      { "name": "System", "type": "boolean", "default": false },
      { "name": "Library", "type": "boolean", "default": false },
      { "name": "Other", "type": "boolean", "default": false }
    ],
    "returns": { "$ref": "Notification.Flags" }
  },
  "JSONRPC.NotifyAll": {
    "type": "method",
    "description": "Notify all other connected clients",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "sender", "type": "string", "required": true },
      { "name": "message", "type": "string", "required": true },
      { "name": "data", "type": "any", "default": null }
    ],
    "returns": "any"
  },
  "Player.GetActivePlayers": {
    "type": "method",
    "description": "Returns all active players",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": {
      "type": "object",
      "properties": {
        "video": { "type": "boolean", "required": true },
        "audio": { "type": "boolean", "required": true },
        "picture": { "type": "boolean", "required": true }
      }
    }
  },
  "AudioPlayer.State": {
    "type": "method",
    "description": "Returns playback state of the audio player (if it is active)",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": { "$ref": "Player.State.Extended" }
  },
  "AudioPlayer.PlayPause": {
    "type": "method",
    "description": "Pauses or unpause playback and returns the new state",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": { "$ref": "Player.State" }
  },
  "AudioPlayer.Stop": {
    "type": "method",
    "description": "Stops playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.SkipPrevious": {
    "type": "method",
    "description": "Skips to previous item on the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.SkipNext": {
    "type": "method",
    "description": "Skips to next item on the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.BigSkipBackward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.BigSkipForward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.SmallSkipBackward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.SmallSkipForward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.Rewind": {
    "type": "method",
    "description": "Rewind current playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.Forward": {
    "type": "method",
    "description": "Forward current playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "AudioPlayer.GetTime": {
    "type": "method",
    "description": "Retrieves the current and total time of the currently playing file",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": { "$ref": "Player.TimeValues" }
  },
  "AudioPlayer.GetPercentage": {
    "type": "method",
    "description": "Retrieve current playback progress in percentage",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": "number"
  },
  "AudioPlayer.SeekTime": {
    "type": "method",
    "description": "Seek to a specific time",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "$ref": "Player.SeekTime", "required": true, "description": "Time to seek to in seconds" }
    ],
    "returns": "string"
  },
  "AudioPlayer.SeekPercentage": {
    "type": "method",
    "description": "Seek to a specific percentage",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "$ref": "Player.SeekPercentage", "required": true, "description": "Percentage value to seek to" }
    ],
    "returns": "string"
  },
  "VideoPlayer.State": {
    "type": "method",
    "description": "Returns playback state of the video player (if it is active)",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": { "$ref": "Player.State.Extended" }
  },
  "VideoPlayer.PlayPause": {
    "type": "method",
    "description": "Pauses or unpause playback and returns the new state",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": { "$ref": "Player.State" }
  },
  "VideoPlayer.Stop": {
    "type": "method",
    "description": "Stops playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.SkipPrevious": {
    "type": "method",
    "description": "Skips to previous item on the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.SkipNext": {
    "type": "method",
    "description": "Skips to next item on the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.BigSkipBackward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.BigSkipForward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.SmallSkipBackward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.SmallSkipForward": {
    "type": "method",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.Rewind": {
    "type": "method",
    "description": "Rewind current playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.Forward": {
    "type": "method",
    "description": "Forward current playback",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "VideoPlayer.GetTime": {
    "type": "method",
    "description": "Retrieves the current and total time of the currently playing file",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": { "$ref": "Player.TimeValues" }
  },
  "VideoPlayer.GetPercentage": {
    "type": "method",
    "description": "Retrieve current playback progress in percentage",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": "number"
  },
  "VideoPlayer.SeekTime": {
    "type": "method",
    "description": "Seek to a specific time",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "$ref": "Player.SeekTime", "required": true }
    ],
    "returns": "string"
  },
  "VideoPlayer.SeekPercentage": {
    "type": "method",
    "description": "Seek to a specific percentage",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "$ref": "Player.SeekPercentage", "required": true }
    ],
    "returns": "string"
  },
  "PicturePlayer.PlayPause": {
    "type": "method",
    "description": "Pauses or unpause slideshow",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.Stop": {
    "type": "method",
    "description": "Stops slideshow",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.SkipPrevious": {
    "type": "method",
    "description": "Skips to previous picture in the slideshow",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.SkipNext": {
    "type": "method",
    "description": "Skips to next picture in the slideshow",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.MoveLeft": {
    "type": "method",
    "description": "If picture is zoomed move viewport left otherwise skip previous",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.MoveRight": {
    "type": "method",
    "description": "If picture is zoomed move viewport right otherwise skip next",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.MoveDown": {
    "type": "method",
    "description": "If picture is zoomed move viewport down",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.MoveUp": {
    "type": "method",
    "description": "If picture is zoomed move viewport up",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.ZoomOut": {
    "type": "method",
    "description": "Zoom out once",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.ZoomIn": {
    "type": "method",
    "description": "Zoom in once",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "PicturePlayer.Zoom": {
    "type": "method",
    "description": "Zooms current picture",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "type": "integer", "required": true, "minimum": 1, "maximum": 10, "description": "Zoom level" }
    ],
    "returns": "string"
  },
  "PicturePlayer.Rotate": {
    "type": "method",
    "description": "Rotates current picture",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": "string"
  },
  "Playlist.Create": {
    "type": "method",
    "description": "Creates a virtual playlist from a given one from a file",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true }
    ],
    "returns": { "type": "object",
      "properties": {
        "playlistid": { "type": "string", "required": true }
      }
    }
  },
  "Playlist.Destroy": {
    "type": "method",
    "description": "Destroys a virtual playlist",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "playlistid", "type": "string", "required": true, "description": "Identification of the playlist" }
    ],
    "returns": "string"
  },
  "Playlist.GetItems": {
    "type": "method",
    "description": "Retrieve items in the playlist",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true },
      { "name": "fields", "$ref": "List.Fields.All" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "name": { "type": "string", "description": "Name of the playlist (if available)" },
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "items": { "$ref": "List.Items.All", "required": true }
      }
    }
  },
  "Playlist.Add": {
    "type": "method",
    "description": "Add items to the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true },
      { "name": "items", "$ref": "Playlist.Id", "required": true, "description": "Adds items from given virtual and/or file based playlist" }
    ],
    "returns": "string"
  },
  "Playlist.Remove": {
    "type": "method",
    "description": "Remove item from the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true },
      { "name": "item", "type": [ "integer", "string" ], "required": true }
    ],
    "returns": "string"
  },
  "Playlist.Swap": {
    "type": "method",
    "description": "Swap items in the playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true },
      { "name": "item1", "$ref": "Playlist.Item.Position", "required": true },
      { "name": "item2", "$ref": "Playlist.Item.Position", "required": true }
    ],
    "returns": "string"
  },
  "Playlist.Clear": {
    "type": "method",
    "description": "Clear playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true }
    ],
    "returns": "string"
  },
  "Playlist.Shuffle": {
    "type": "method",
    "description": "Shuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true }
    ],
    "returns": "string"
  },
  "Playlist.UnShuffle": {
    "type": "method",
    "description": "Unshuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "playlist", "$ref": "Playlist.Id", "required": true }
    ],
    "returns": "string"
  },
  "VideoPlaylist.Play": {
    "type": "method",
    "description": "Play current or a specific item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Item.Position", "description": "Position of the item" }
    ],
    "returns":  { "type": "object",
      "properties": {
        "success": { "type": "boolean", "required": true }
      }
    }
  },
  "VideoPlaylist.SkipPrevious": {
    "type": "method",
    "description": "Skip current item and play previous item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "VideoPlaylist.SkipNext": {
    "type": "method",
    "description": "Skip current item and play next item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "VideoPlaylist.GetItems": {
    "type": "method",
    "description": "Get all items from playlist",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "List.Fields.Video" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "state": { "$ref": "Playlist.State" },
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "items": { "$ref": "List.Items.Video", "required": true }
      }
    }
  },
  "VideoPlaylist.Add": {
    "type": "method",
    "description": "Add item(s) to playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Video.Item", "required": true }
    ],
    "returns": "string"
  },
  "VideoPlaylist.Insert": {
    "type": "method",
    "description": "Insert item(s) into playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "index", "$ref": "Playlist.Item.Position", "required": true },
      { "name": "item", "$ref": "Playlist.Video.Item", "required": true }
    ],
    "returns": "string"
  },
  "VideoPlaylist.Remove": {
    "type": "method",
    "description": "Remove item from playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Item.Position", "required": true }
    ],
    "returns": "string"
  },
  "VideoPlaylist.Clear": {
    "type": "method",
    "description": "Clear playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "VideoPlaylist.Shuffle": {
    "type": "method",
    "description": "Shuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "VideoPlaylist.UnShuffle": {
    "type": "method",
    "description": "Unshuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "AudioPlaylist.Play": {
    "type": "method",
    "description": "Play current or a specific item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Item.Position" },
      { "name": "songid", "$ref": "Library.Id", "description": "Identification of a song from the audio library" }
    ],
    "returns":  { "type": "object",
      "properties": {
        "success": { "type": "boolean", "required": true }
      }
    }
  },
  "AudioPlaylist.SkipPrevious": {
    "type": "method",
    "description": "Skip current item and play previous item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "AudioPlaylist.SkipNext": {
    "type": "method",
    "description": "Skip current item and play next item",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "AudioPlaylist.GetItems": {
    "type": "method",
    "description": "Get all items from playlist",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Audio.Fields.Song" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "state": { "$ref": "Playlist.State" },
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "items": { "$ref": "List.Items.Audio", "required": true }
      }
    }
  },
  "AudioPlaylist.Add": {
    "type": "method",
    "description": "Add item(s) to playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Audio.Item", "required": true }
    ],
    "returns": "string"
  },
  "AudioPlaylist.Insert": {
    "type": "method",
    "description": "Insert item(s) into playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "index", "$ref": "Playlist.Item.Position", "required": true },
      { "name": "item", "$ref": "Playlist.Audio.Item", "required": true }
    ],
    "returns": "string"
  },
  "AudioPlaylist.Remove": {
    "type": "method",
    "description": "Remove item from playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "item", "$ref": "Playlist.Item.Position", "required": true }
    ],
    "returns": "string"
  },
  "AudioPlaylist.Clear": {
    "type": "method",
    "description": "Clear playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "AudioPlaylist.Shuffle": {
    "type": "method",
    "description": "Shuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "AudioPlaylist.UnShuffle": {
    "type": "method",
    "description": "Unshuffle playlist",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [ ],
    "returns": "string"
  },
  "Files.GetSources": {
    "type": "method",
    "description": "Get the sources of the media windows",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "media", "$ref": "Files.Media", "required": true },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "shares": { "$ref": "List.Items.Shares", "required": true }
      }
    }
  },
  "Files.Download": {
    "type": "method",
    "transport": "FileDownload",
    "permission": "ReadData",
    "params": [
      { "name": "path", "type": "string", "required": true }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "path": { "type": "string", "required": true }
      }
    }
  },
  "Files.GetDirectory": {
    "type": "method",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "directory", "type": "string", "required": true },
      { "name": "media", "$ref": "Files.Media", "default": "files" },
      { "name": "fields", "$ref": "List.Fields.All" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "files": { "$ref": "List.Items.Files", "required": true }
      }
    }
  },
  "AudioLibrary.GetArtists": {
    "type": "method",
    "description": "Retrieve all artists",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "genreid", "$ref": "Library.Id" },
      { "name": "fields", "$ref": "Audio.Fields.Artist" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "artists": { "type": "array",
          "items": { "$ref": "Audio.Details.Artist" }
        }
      }
    }
  },
  "AudioLibrary.GetArtistDetails": {
    "type": "method",
    "description": "Retrieve details about a specific artist",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "artistid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Audio.Fields.Artist" }
    ],
    "returns": { "type": "object",
      "properties": {
        "artistdetails": { "$ref": "Audio.Details.Artist" }
      }
    }
  },
  "AudioLibrary.GetAlbums": {
    "type": "method",
    "description": "Retrieve all albums from specified artist or genre",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "artistid", "$ref": "Library.Id" },
      { "name": "genreid", "$ref": "Library.Id" },
      { "name": "fields", "$ref": "Audio.Fields.Album" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "albums": { "type": "array",
          "items": { "$ref": "Audio.Details.Album" }
        }
      }
    }
  },
  "AudioLibrary.GetAlbumDetails": {
    "type": "method",
    "description": "Retrieve details about a specific album",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "albumid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Audio.Fields.Album" }
    ],
    "returns": { "type": "object",
      "properties": {
        "albumdetails": { "$ref": "Audio.Details.Album" }
      }
    }
  },
  "AudioLibrary.GetSongs": {
    "type": "method",
    "description": "Retrieve all songs from specified album, artist or genre",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "artistid", "$ref": "Library.Id" },
      { "name": "albumid", "$ref": "Library.Id" },
      { "name": "genreid", "$ref": "Library.Id" },
      { "name": "fields", "$ref": "Audio.Fields.Song" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "songs": { "type": "array",
          "items": { "$ref": "Audio.Details.Song" }
        }
      }
    }
  },
  "AudioLibrary.GetSongDetails": {
    "type": "method",
    "description": "Retrieve details about a specific song",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "songid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Audio.Fields.Song" }
    ],
    "returns": { "type": "object",
      "properties": {
        "songdetails": { "$ref": "Audio.Details.Song" }
      }
    }
  },
  "AudioLibrary.GetGenres": {
    "type": "method",
    "description": "Retrieve all genres",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Library.Fields.Genre" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "genres": { "type": "array", "required": true,
          "items": { "$ref": "Library.Details.Genre" }
        }
      }
    }
  },
  "AudioLibrary.ScanForContent": {
    "type": "method",
    "description": "Scans the audio sources for new library items",
    "transport": "Response",
    "permission": "ScanLibrary",
    "params": [],
    "returns": "string"
  },
  "VideoLibrary.GetMovies": {
    "type": "method",
    "description": "Retrieve all movies",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.Movie" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "movies": { "type": "array",
          "items": { "$ref": "Video.Details.Movie" }
        }
      }
    }
  },
  "VideoLibrary.GetMovieDetails": {
    "type": "method",
    "description": "Retrieve details about a specific movie",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "movieid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.Movie" }
    ],
    "returns": { "type": "object",
      "properties": {
        "moviedetails": { "$ref": "Video.Details.Movie" }
      }
    }
  },
  "VideoLibrary.GetMovieSets": {
    "type": "method",
    "description": "Retrieve all movie sets",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.MovieSet" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "sets": { "type": "array",
          "items": { "$ref": "Video.Details.MovieSet" }
        }
      }
    }
  },
  "VideoLibrary.GetMovieSetDetails": {
    "type": "method",
    "description": "Retrieve details about a specific movie set",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "setid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.MovieSet" },
      { "name": "movies", "type": "object",
        "properties": {
          "fields": { "$ref": "Video.Fields.Movie" },
          "limits": { "$ref": "List.Limits" },
          "sort": { "$ref": "List.Sort" }
        }
      }
    ],
    "returns": { "type": "object",
      "properties": {
        "setdetails": { "$ref": "Video.Details.MovieSet.Extended" }
      }
    }
  },
  "VideoLibrary.GetTVShows": {
    "type": "method",
    "description": "Retrieve all tv shows",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.TVShow" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "tvshows": { "type": "array",
          "items": { "$ref": "Video.Details.TVShow" }
        }
      }
    }
  },
  "VideoLibrary.GetTVShowDetails": {
    "type": "method",
    "description": "Retrieve details about a specific tv show",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "tvshowid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.TVShow" }
    ],
    "returns": { "type": "object",
      "properties": {
        "tvshowdetails": { "$ref": "Video.Details.TVShow" }
      }
    }
  },
  "VideoLibrary.GetSeasons": {
    "type": "method",
    "description": "Retrieve all tv seasons",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "tvshowid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.Season" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "seasons": { "type": "array",
          "items": { "$ref": "Video.Details.Season" }
        }
      }
    }
  },
  "VideoLibrary.GetEpisodes": {
    "type": "method",
    "description": "Retrieve all tv show episodes",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "tvshowid", "$ref": "Library.Id" },
      { "name": "season", "type": "integer", "minimum": 0, "default": -1 },
      { "name": "fields", "$ref": "Video.Fields.Episode" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "episodes": { "type": "array",
          "items": { "$ref": "Video.Details.Episode" }
        }
      }
    }
  },
  "VideoLibrary.GetEpisodeDetails": {
    "type": "method",
    "description": "Retrieve details about a specific tv show episode",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "episodeid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.Episode" }
    ],
    "returns": { "type": "object",
      "properties": {
        "episodedetails": { "$ref": "Video.Details.Episode" }
      }
    }
  },
  "VideoLibrary.GetMusicVideos": {
    "type": "method",
    "description": "Retrieve all music videos",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "artistid", "$ref": "Library.Id" },
      { "name": "albumid", "$ref": "Library.Id" },
      { "name": "fields", "$ref": "Video.Fields.MusicVideo" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "musicvideos": { "type": "array",
          "items": { "$ref": "Video.Details.MusicVideo" }
        }
      }
    }
  },
  "VideoLibrary.GetMusicVideoDetails": {
    "type": "method",
    "description": "Retrieve details about a specific music video",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "musicvideoid", "$ref": "Library.Id", "required": true },
      { "name": "fields", "$ref": "Video.Fields.MusicVideo" }
    ],
    "returns": { "type": "object",
      "properties": {
        "musicvideodetails": { "$ref": "Video.Details.MusicVideo" }
      }
    }
  },
  "VideoLibrary.GetRecentlyAddedMovies": {
    "type": "method",
    "description": "Retrieve all recently added movies",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.Movie" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "movies": { "type": "array",
          "items": { "$ref": "Video.Details.Movie" }
        }
      }
    }
  },
  "VideoLibrary.GetRecentlyAddedEpisodes": {
    "type": "method",
    "description": "Retrieve all recently added tv episodes",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.Episode" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "episodes": { "type": "array",
          "items": { "$ref": "Video.Details.Episode" }
        }
      }
    }
  },
  "VideoLibrary.GetRecentlyAddedMusicVideos": {
    "type": "method",
    "description": "Retrieve all recently added music videos",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "fields", "$ref": "Video.Fields.MusicVideo" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": { "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "musicvideos": { "type": "array",
          "items": { "$ref": "Video.Details.MusicVideo" }
        }
      }
    }
  },
  "VideoLibrary.GetGenres": {
    "type": "method",
    "description": "Retrieve all genres",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "type", "type": "string", "required": true, "enum": [ "movie", "tvshow", "musicvideo"] },
      { "name": "fields", "$ref": "Library.Fields.Genre" },
      { "name": "limits", "$ref": "List.Limits" },
      { "name": "sort", "$ref": "List.Sort" }
    ],
    "returns": {
      "type": "object",
      "properties": {
        "limits": { "$ref": "List.LimitsReturned", "required": true },
        "genres": { "type": "array", "required": true,
          "items": { "$ref": "Library.Details.Genre" }
        }
      }
    }
  },
  "VideoLibrary.ScanForContent": {
    "type": "method",
    "description": "Scans the video sources for new library items",
    "transport": "Response",
    "permission": "ScanLibrary",
    "params": [],
    "returns": "string"
  },
  "System.Shutdown": {
    "type": "method",
    "description": "Shuts the system running XBMC down",
    "transport": "Response",
    "permission": "ControlPower",
    "params": [],
    "returns": "string"
  },
  "System.Suspend": {
    "type": "method",
    "description": "Suspends the system running XBMC",
    "transport": "Response",
    "permission": "ControlPower",
    "params": [],
    "returns": "string"
  },
  "System.Hibernate": {
    "type": "method",
    "description": "Puts the system running XBMC into hibernate mode",
    "transport": "Response",
    "permission": "ControlPower",
    "params": [],
    "returns": "string"
  },
  "System.Reboot": {
    "type": "method",
    "description": "Reboots the system running XBMC",
    "transport": "Response",
    "permission": "ControlPower",
    "params": [],
    "returns": "string"
  },
  "System.GetInfoLabels": {
    "type": "method",
    "description": "Retrieve info labels about the system",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "labels", "type": "array", "required": true, "items": { "type": "string" }, "minItems": 1, "description": "See http://wiki.xbmc.org/index.php?title=InfoLabels for a list of possible info labels" }
    ],
    "returns": {
      "type": "object",
      "description": "List of key-value pairs of the retrieved info labels"
    }
  },
  "System.GetInfoBooleans": {
    "type": "method",
    "description": "Retrieve info booleans about the system",
    "transport": "Response",
    "permission": "ReadData",
    "params": [
      { "name": "booleans", "type": "array", "required": true, "items": { "type": "string" }, "minItems": 1 }
    ],
    "returns": {
      "type": "object",
      "description": "List of key-value pairs of the retrieved info booleans"
    }
  },
  "Input.Left": {
    "type": "method",
    "description": "Navigate left in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Right": {
    "type": "method",
    "description": "Navigate right in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Down": {
    "type": "method",
    "description": "Navigate down in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Up": {
    "type": "method",
    "description": "Navigate up in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Select": {
    "type": "method",
    "description": "Select current item in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Back": {
    "type": "method",
    "description": "Goes back in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "Input.Home": {
    "type": "method",
    "description": "Goes to home window in GUI",
    "transport": "Response",
    "permission": "Navigate",
    "params": [],
    "returns": "string"
  },
  "XBMC.GetVolume": {
    "type": "method",
    "description": "Retrieve the current volume",
    "transport": "Response",
    "permission": "ReadData",
    "params": [],
    "returns": "integer"
  },
  "XBMC.SetVolume": {
    "type": "method",
    "description": "Set the current volume",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "value", "type": "integer", "minimum": 0, "maximum": 100, "required": true }
    ],
    "returns": "integer"
  },
  "XBMC.ToggleMute": {
    "type": "method",
    "description": "Toggle mute/unmute",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [],
    "returns": { "type": "integer", "description": "New volume" }
  },
  "XBMC.Play": {
    "type": "method",
    "description": "Starts playback of the given file",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "file", "type": "string", "required": true }
    ],
    "returns": "string"
  },
  "XBMC.StartSlideshow": {
    "type": "method",
    "description": "Starts slideshow with the images from the given directory",
    "transport": "Response",
    "permission": "ControlPlayback",
    "params": [
      { "name": "directory", "type": "string", "required": true },
      { "name": "random", "type": "boolean", "default": true },
      { "name": "recursive", "type": "boolean", "default": true }
    ],
    "returns": "string"
  },
  "XBMC.Log": {
    "type": "method",
    "description": "Logs a line in the xbmc.log",
    "transport": "Response",
    "permission": "Logging",
    "params": [
      { "name": "message", "type": "string", "required": true },
      { "name": "level", "type": "string", "default": "debug", "enum": [ "debug", "info", "notice", "warning", "error", " severe", "fatal", "none" ] }
    ],
    "returns": "string"
  },
  "XBMC.Quit": {
    "type": "method",
    "description": "Quit XBMC",
    "transport": "Response",
    "permission": "ControlPower",
    "params": [],
    "returns": "string"
  }
}